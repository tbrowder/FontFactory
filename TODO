Use FF DocFont to add font info
  underline, strikethrough, etc.

Use QueryOS to fix MacOS test error
  from attempted font load tests 6 and 7

Check on Text box
- align: left, right, center, justify

DONE: create bin/ff-download to:
  DONE: create and download a font sample PDF
  DONE: download the license files
  DONE: download examples
  DONE: download fonts
  DONE: list resources

DONE: Put sub bin-cmp in ::Font::Utils.rakumod

DONE: Check freefont vs loaded font for reuse
+ per David:
    reuse of FontObj is okay
    reuse of Face is not!

later make OCR page a vertical grid with appropriate info
  for now just rows with appropiate data

add ability to define unicode codepoint ranges for testing and
  interrogating string geometric attributes
  + record some ranges

add capability to set vertical languages
  as well as right-to-left

in xt-bad test, remove .precomp before testing

create my pfa fonts to ttf (or otf if possible)
  'printafm' converts .pfa to .afm
  checking on commercial Mac program Trans4
  also check on fontconfig

DONE: Test font loading

DONE: Finish Config file check: warn but DO NOT MODIFY

Finish docs (explain config check)

DONE: have to show license

DONE: YES!!Do resources files have to be in META6.json? check installed  YES!!!

option to print a font sampler PDF doc
+ see FontFactory

Subs to build:
  locate-font
  install-config (paths to font files)
  get-resource-content $path
  # from docs:

  # To actually use the file's content, the user can extract it as a
  # string in another routine in the same module:
  sub get-resource-content {
      say $?DISTRIBUTION.content('lib/MyFoo.rakumod').open.slurp;
      # OUTPUT: «unit module MyFoo;␤»
  }


DONE: Add the MICR font to be installed
+ put in /resources
  - Build.rakumod
  - install in $HOME/.FreeFont/*
    (unless it's already there
+ add doc stuff from FFT1

Decide on the interface details:
  the user asks for a font by
    code
    code2
    number
    name (with or without spaces)
    adobe name (with or without spaces)
  the factory first looks in its
    hash to see if there is already a font object
    if not,
      find the path,
        check the user's home dir first
        if not
          use :find-font
          update user's home dir
      load the font
      and reference it in the hash

    the hash is %fonts with a number key
      with a value of the object

another option should be downloading the GNU file archive 
  directly and unpacking   it
