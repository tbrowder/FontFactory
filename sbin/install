#!/usr/bin/env raku

use QueryOS;

use FontFactory;
use FontFactory::BuildUtils;
use FontFactory::Utils;
use FontFactory::Resources;
use FontFactory::Config;

my $debug = 0;
$debug = 1 if @*ARGS.elems;

# Run by Build.rakumod upon zef install
# MICR et alii fonts, licenses, and 
# supporting material.
# Will NOT run if the '$*HOME/.FontFactory/Config' file exists
# unless $debug is true and then it will rerun a new installation.

my $home = $*HOME.IO.d ??
           $*HOME      !! 0;

if not $home {
    die "FATAL: Unable to determine a \$*HOME directory for the user.";
}

my $dotFontFactory = '.FontFactory';
my $cfil = "$home/$dotFontFactory/Config";
if $cfil.IO.r {
    # It exists. We are done here.
    exit 0;
}

=finish 
# temp end

# need some args to allow testing and
# installation
my $tfil = "dev/Build.rakumod";
if $tfil.IO.e {
    $home = $*CWD; 
    $dotFontFactory = "tdir/FontFactory";
}

# many files are in /resources:
#   DigitalGraphicLabs.html
#   license.txt
#   micrenc.ttf
#   ...
if $debug {
    my @fils = get-resources-hash.keys.sort;
    say "DEBUG: resources list:";
    say "  $_" for @fils;
}

# Extract the files from /resources and put them
# in /fonts or /docs
manage-home-freefont :$home, :$dotFontFactory, :$debug;

=begin comment
my $fdir = "$home/$dotFontFactory";

my $f = "$home/$dotFontFactory/Config.yml";
say "DEBUG: config file: '$f'" if $debug;

my $res = False;
if $f.IO.r {
    say "File '$f' exists.";
    say "Checking for validity...";
    $res = check-config $f, :$debug;
    if $res {
        say "Installation complete.";
    }
    else {
        say "Invalid file...correcting it.";
        $res = False;
    }
}
else {
}

if $debug {
    print "DEBUG: status of \$res: ";
    say $res
}

if not $res {
    say "Creating file '$f'...";
    create-config :$home, :$dotFontFactory, :$debug;
    # and check again?
    $res = check-config $f, :$debug;
    if $res {
        say "Installation complete.";
    }
    else {
        say "Still an an invalid config file!";
        $res = False;
    }
}

# Get the path data if and only if
# the collection is on the local file
# system. Notify the user if it's not.
=end comment



=finish

# query locate-font

# write the data
mkdir $dir;
my $fh = open $f, :w; 
$fh.close;
